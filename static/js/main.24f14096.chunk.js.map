{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/Searchbox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","robo","id","name","email","className","src","alt","cardList","cardArray","robots","map","value","i","key","length","style","color","Searchbox","onclicking","placeholder","type","onChange","Scroll","props","overflowX","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","ChangeState","event","searchfield","target","fetch","then","response","json","users","filteredRobs","filter","robot","toLowerCase","includes","CardList","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCNSC,EAVH,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACHC,EAAeD,EAAfC,GAAGC,EAAYF,EAAZE,KAAKC,EAAOH,EAAPG,MACf,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,SACpD,wBAAIF,UAAU,MAAMF,GACpB,2BAAIC,KCWDI,EAhBA,SAAC,GAAY,IAIlBC,EAJiB,EAAVC,OAIWC,KAAI,SAACC,EAAMC,GAC/B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGZ,KAAMW,OAE/B,OAAuB,IAAnBH,EAAUM,OACH,wBAAIV,UAAU,KAAKW,MAAO,CAACC,MAAM,UAAjC,yBAGP,6BACKR,ICAES,EAbE,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACf,OACI,yBAAKd,UAAU,OACf,2BACAA,UAAU,yCACVe,YAAY,mBACZC,KAAK,SACLC,SAAUH,MCAHI,G,MAPA,SAACC,GACZ,OACI,yBAAKR,MAAO,CAACS,UAAW,SAAUC,UAAU,SAAUC,OAAQ,kBAAkBC,OAAO,UAClFJ,EAAMK,YCHEC,E,YACjB,aAAc,IAAD,8BACT,+CACKC,MAAM,CACPC,UAAU,GAHL,E,+EAMKC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACH,oDAEJG,KAAKX,MAAMK,a,GAfiBQ,IAAMC,WCK3BC,E,YAClB,aAAc,IAAD,8BACT,+CAWJC,YAAY,SAACC,GACT,EAAKL,SAAS,CAACM,YAAaD,EAAME,OAAO/B,SAXzC,EAAKmB,MAAM,CACPrB,OAAQ,GACRgC,YAAa,IAJR,E,iFAOO,IAAD,OACfE,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAAC1B,OAAOsC,S,+BAM/B,IAAD,OACEC,EAAcd,KAAKJ,MAAMrB,OAAOwC,QAClC,SAACC,GAAD,OAAUA,EAAMhD,KAAKiD,cAAcC,SAAS,EAAKtB,MAAMW,YAAYU,kBAGnE,OAAQjB,KAAKJ,MAAMrB,OAAOK,OAKlB,yBAAKV,UAAU,MACX,wBAAIA,UAAU,UAAd,gBACA,kBAAC,EAAD,CAAWc,WAAYgB,KAAKK,cAC5B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAACc,EAAD,CAAU5C,OAAQuC,OAR9B,wBAAI5C,UAAU,SAAd,iB,GAxBcgC,IAAMC,WCAxCiB,IAASC,OACL,kBAAC,EAAD,MAECC,SAASC,eAAe,SPyHvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.24f14096.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card= ({robo}) => {\n    const {id,name,email}=robo;\n    return (\n        <div className='tc dib bg-light-green br3 bw5 pa0 ma2 grow shadow-5'>\n            <img src={`https://robohash.org/${id}?100x100`} alt=\"robo\" />\n            <h2 className='f3'>{name}</h2>\n            <p>{email}</p>\n        </div>\n    )\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst cardList=({robots})=>{\n    // if(true){\n    //     throw new Error('Noooo!!');\n    // }\n    const cardArray =robots.map((value,i)=>{\n        return <Card key={i} robo={value} />\n    })\n    if (cardArray.length===0){\n        return <h3 className='tc' style={{color:'white'}}>Oops No match Found!!</h3>\n    }\n    return (\n        <div>\n            {cardArray}\n        </div>\n    )\n}\nexport default cardList;","import React from 'react';\n\nconst Searchbox= ({onclicking})  =>{\n    return(\n        <div className='pa2'>\n        <input \n        className='pa2 br3 grow bg-lightest-blue b--green' \n        placeholder=\"find your friend\" \n        type='search'\n        onChange={onclicking}\n        />\n        \n        </div>\n    )\n}\nexport default Searchbox;","import React from 'react';\n\nconst Scroll = (props)=>{\n    return (\n        <div style={{overflowX: 'hidden', overflowY:'scroll', border: '1px solid black',height:'800px'}}>\n            {props.children}\n        </div>\n    )\n}\nexport default Scroll;","import React from 'react';\n\nexport default class ErrorBoundary extends React.Component{\n    constructor(){\n        super()\n        this.state={\n            hasError: false\n        }\n    }\n    componentDidCatch(error,info){\n        this.setState({hasError:true});\n    }\n    render (){\n\n        if(this.state.hasError){\n            return <h1>Oops Error Occured!!</h1>\n        }\n        return this.props.children;\n\n    }\n}","import React from 'react';\nimport CardList from '../Components/CardList';\n// import {robots} from './robots'; now we are fetching from directly server\nimport Searchbox from '../Components/Searchbox'\nimport './App.css'\nimport Scroll from '../Components/Scroll'\nimport ErrorBoundary from '../Components/ErrorBoundary'\nexport default class  App extends React.Component{\n    constructor(){\n        super();\n        this.state={\n            robots: [],\n            searchfield: ''\n        }\n    }\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users=> this.setState({robots:users}));\n    }\n    ChangeState=(event)=>{\n        this.setState({searchfield: event.target.value})\n        // console.log(event.target.value);\n    }\n    render(){\n        const filteredRobs= this.state.robots.filter(\n            (robot)=> robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        );\n        \n            return !this.state.robots.length\n                ?\n                    <h1 className='tc f1'>Loading!!</h1>\n                :\n        \n                    <div className='tc'>\n                        <h1 className='tc f1 '> RoboFriends</h1>\n                        <Searchbox onclicking={this.ChangeState} />\n                        <Scroll>\n                            <ErrorBoundary>\n                                <CardList robots={filteredRobs} /> \n                            </ErrorBoundary>\n                            \n                        </Scroll>\n                    </div>\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport App from './Containers/App'\n\nReactDOM.render(\n    <App />  \n    ,\n     document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}